<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <OutputType>Exe</OutputType>
    <TargetFramework>net8.0</TargetFramework>
    <ImplicitUsings>enable</ImplicitUsings>
    <Nullable>enable</Nullable>
    <LangVersion>preview</LangVersion>
    <!-- <PublishSingleFile>true</PublishSingleFile> -->
    <SelfContained>true</SelfContained>
    <IncludeAllContentForSelfExtract>true</IncludeAllContentForSelfExtract>
  </PropertyGroup>

  <Choose>
      <When Condition="$([MSBuild]::IsOsPlatform('Windows'))">
        <PropertyGroup>
            <RuntimeIdentifier>win-x64</RuntimeIdentifier>
        </PropertyGroup>
      </When>
      <When Condition="$([MSBuild]::IsOsPlatform('Linux'))">
        <PropertyGroup>
            <RuntimeIdentifier>linux-x64</RuntimeIdentifier>
        </PropertyGroup>
      </When>
      <When Condition="$([MSBuild]::IsOsPlatform('OSX'))">
        <PropertyGroup>
            <RuntimeIdentifier>osx-x64</RuntimeIdentifier>
        </PropertyGroup>
      </When>
    </Choose>

    <Target Name="CheckRuntimeIdentifier" BeforeTargets="Build" Condition="'$(RuntimeIdentifier)'==''">
      <Error Text="RuntimeIdentifier property not set." />
    </Target>

  <ItemGroup>
    <PackageReference Include="microsoft.extensions.dependencyInjection" Version="7.0.0" />
    <PackageReference Include="microsoft.extensions.hosting" Version="7.0.1" />
    <PackageReference Include="NodaTime" Version="3.1.11" />
    <PackageReference Include="Serilog" Version="4.0.0" />
    <PackageReference Include="Serilog.Extensions.Hosting" Version="7.0.0" />
    <PackageReference Include="Serilog.Settings.Configuration" Version="7.0.1" />
    <PackageReference Include="Serilog.Sinks.Console" Version="4.1.0" />
    <PackageReference Include="Serilog.Sinks.Seq" Version="5.2.2" />
    <PackageReference Include="Serilog.Sinks.Trace" Version="4.0.0" />
    <!-- <PackageReference Include="MagicPhysX" Version="1.0.0">
      <IncludeAssets>runtime</IncludeAssets>
    </PackageReference> -->
  </ItemGroup>
  <ItemGroup>
    <ProjectReference Include="..\Lark.Engine\Lark.Engine.csproj" />
    <!-- <ProjectReference Include="..\..\MagicPhysX\src\MagicPhysX\MagicPhysX.csproj" /> Not needed when using Jolt -->
  </ItemGroup>

  <Target Name="MakeDir" BeforeTargets="Build">
    <MakeDir Directories=".\resources" />
    <MakeDir Directories=".\resources\shaders" />
    <MakeDir Directories=".\resources\textures" />
    <MakeDir Directories=".\resources\models" />
  </Target>

  <!-- Before Build;Publish check if resources/textures/brdf_lut.ktx exists; -->
  <!-- If not use BRDFGenerator to create one -->
  <Target Name="GenerateBRDFLUT" BeforeTargets="Build;Publish">
    <ItemGroup>
      <BRDFFile Include=".\resources\textures\brdf_lut.ktx" />
    </ItemGroup>
    <Exec Condition="!Exists('%(BRDFFile.FullPath)')" Command="BRDFGenerator.exe -f .\resources\textures\brdf_lut.ktx" />
  </Target>


  <Target Name="CompileShaders" BeforeTargets="Build;Publish">
    <ItemGroup>
      <ShaderFiles Include=".\resources\shaders\**\*.*" />
      <TextureFiles Include=".\resources\textures\**\*.*" />
      <ModelFiles Include=".\resources\models\**\*.*" />
    </ItemGroup>

    <MakeDir Directories="$(OutDir)\resources" />
    <MakeDir Directories="$(OutDir)\resources\shaders" />
    <MakeDir Directories="$(OutDir)\resources\textures" />
    <MakeDir Directories="$(OutDir)\resources\models" />

    <Exec Condition="'$(OS)' == 'Windows_NT'" Command="glslc.exe -o &quot;$(OutDir)%(ShaderFiles.Identity).spv&quot; &quot;%(ShaderFiles.Identity)&quot;" />
    <Exec Condition="'$(OS)' != 'Windows_NT'" Command="glslc -o &quot;$(OutDir)%(ShaderFiles.Identity).spv&quot; &quot;%(ShaderFiles.Identity)&quot;" />
    <!-- <Exec Command="glslc.exe -o &quot;$(OutDir)%(ShaderFiles.Identity).spv&quot; &quot;%(ShaderFiles.Identity)&quot;" /> -->
    <Copy SourceFiles="@(TextureFiles)" DestinationFolder="$(OutDir)resources\textures\%(RecursiveDir)" />
    <Copy SourceFiles="@(ModelFiles)" DestinationFolder="$(OutDir)resources\models\%(RecursiveDir)" />
  </Target>

  <Target Name="NpmInstall" Inputs="..\Lark.UI\package.json;..\Lark.UI\package-lock.json" Outputs="..\Lark.UI\node_modules">
    <!-- Run npm install in the Lark.UI folder -->
    <Exec WorkingDirectory="..\Lark.UI" Command="npm install" />
  </Target>
  
  <Target Name="BuildAndCopyClient" DependsOnTargets="NpmInstall" BeforeTargets="Build">
    <!-- Run npm run build in the Lark.UI folder -->
    <Exec WorkingDirectory="..\Lark.UI" Command="npm run build" />
  
    <!-- Copy the output to the resources\client folder -->
    <ItemGroup>
      <DistFiles Include="..\Lark.UI\dist\**\*.*" />
    </ItemGroup>
    <MakeDir Directories=".\resources\client" />
    <Copy SourceFiles="@(DistFiles)" DestinationFolder=".\resources\client\%(RecursiveDir)" />
    <Copy SourceFiles="@(DistFiles)" DestinationFolder="$(OutDir)\resources\client\%(RecursiveDir)" />
  </Target>

  <Target Name="CopyResources" DependsOnTargets="BuildAndCopyClient;CompileShaders" AfterTargets="Build;Publish">
    <ItemGroup>
      <ResourceFiles Include="$(OutDir)resources\**\*.*" />
    </ItemGroup>
    <Copy SourceFiles="@(ResourceFiles)" DestinationFolder="$(PublishDir)\resources\%(RecursiveDir)" />
  </Target>
</Project>
